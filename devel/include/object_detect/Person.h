// Generated by gencpp from file object_detect/Person.msg
// DO NOT EDIT!


#ifndef OBJECT_DETECT_MESSAGE_PERSON_H
#define OBJECT_DETECT_MESSAGE_PERSON_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace object_detect
{
template <class ContainerAllocator>
struct Person_
{
  typedef Person_<ContainerAllocator> Type;

  Person_()
    : detect_flag(0)
    , cx(0)
    , cy(0)
    , dx(0)
    , dy(0)  {
    }
  Person_(const ContainerAllocator& _alloc)
    : detect_flag(0)
    , cx(0)
    , cy(0)
    , dx(0)
    , dy(0)  {
  (void)_alloc;
    }



   typedef uint8_t _detect_flag_type;
  _detect_flag_type detect_flag;

   typedef uint8_t _cx_type;
  _cx_type cx;

   typedef uint8_t _cy_type;
  _cy_type cy;

   typedef uint8_t _dx_type;
  _dx_type dx;

   typedef uint8_t _dy_type;
  _dy_type dy;





  typedef boost::shared_ptr< ::object_detect::Person_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_detect::Person_<ContainerAllocator> const> ConstPtr;

}; // struct Person_

typedef ::object_detect::Person_<std::allocator<void> > Person;

typedef boost::shared_ptr< ::object_detect::Person > PersonPtr;
typedef boost::shared_ptr< ::object_detect::Person const> PersonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_detect::Person_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_detect::Person_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_detect::Person_<ContainerAllocator1> & lhs, const ::object_detect::Person_<ContainerAllocator2> & rhs)
{
  return lhs.detect_flag == rhs.detect_flag &&
    lhs.cx == rhs.cx &&
    lhs.cy == rhs.cy &&
    lhs.dx == rhs.dx &&
    lhs.dy == rhs.dy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_detect::Person_<ContainerAllocator1> & lhs, const ::object_detect::Person_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_detect

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::object_detect::Person_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_detect::Person_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_detect::Person_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_detect::Person_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detect::Person_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detect::Person_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_detect::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d4493f50035a5d649cf03c09f9d7953f";
  }

  static const char* value(const ::object_detect::Person_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd4493f50035a5d64ULL;
  static const uint64_t static_value2 = 0x9cf03c09f9d7953fULL;
};

template<class ContainerAllocator>
struct DataType< ::object_detect::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_detect/Person";
  }

  static const char* value(const ::object_detect::Person_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_detect::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 detect_flag\n"
"uint8 cx\n"
"uint8 cy \n"
"uint8 dx	\n"
"uint8 dy	\n"
;
  }

  static const char* value(const ::object_detect::Person_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_detect::Person_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detect_flag);
      stream.next(m.cx);
      stream.next(m.cy);
      stream.next(m.dx);
      stream.next(m.dy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Person_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_detect::Person_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_detect::Person_<ContainerAllocator>& v)
  {
    s << indent << "detect_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.detect_flag);
    s << indent << "cx: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cx);
    s << indent << "cy: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cy);
    s << indent << "dx: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dx);
    s << indent << "dy: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_DETECT_MESSAGE_PERSON_H
